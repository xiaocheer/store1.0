3696191cc4684d089ee56a83dcf22905
//race
#include<iostream>
#include<string>
#include<cmath>
#include <stack>
using namespace std;

//string fraction[] = {"��", "��"};
string digit[] = { "��", "Ҽ", "��", "��", "��", "��", "½", "��", "��", "��" };
//string unit[] = {"","ʰ","��","Ǫ","��","��"};//��Ǯ���ֳɶ�,ÿ�ĸ�һ��,ʵ���ϵõ�����һ����ά����
stack<string> stak;//��ջʵ�ָ�λ����


string transform(double num)
{
	string str;
	if(num<0)
		str="����Ϊ����";
	if(num>1000000000)
		{
		str="�������Χ";
		return str;
		}

//	double a;
	int a;
	int b;
	a=floor(num);//ȡ��
	cout<<a<<endl;
	b=(num-a)*100;//ȡ��λС��
	cout<<b<<endl;

	string endmoney="";
	string headmoney[]={"","",""};
	string head;
	if(b==0)
		endmoney="��";
	else
	{
		if(b/10==0)
			endmoney=endmoney+"��";
		else endmoney+=digit[b/10]+"��";
		if(b%10!=0)
			endmoney+=digit[b%10]+"��";
	}

	if(a==0)
		head="��";


	int temp,t;

	for(int i=0;a!=0;i++)
	{
		temp=a%10000;//ȡ����λ��
		t=temp;//��¼temp�ı���
		a/=10000;

		if(temp>=1000)
		{
			headmoney[i]+=digit[temp/1000]+"Ǫ";
			temp=temp%1000;

			if(temp/100!=0 && temp%100/10!=0 && temp%100%10!=0) //1234
			{
				headmoney[i]+=digit[temp/100]+"��";
				temp=temp%100;
				headmoney[i]+=digit[temp/10]+"ʰ";
				temp=temp%10;
				headmoney[i]+=digit[temp]+"";
			}

			else if(temp/100==0 && temp%100/10!=0 && temp%100%10!=0)//1021
			{
				headmoney[i]+="��";
				temp=temp%100;
				headmoney[i]+=digit[temp/10]+"ʰ";
				temp=temp%10;
				headmoney[i]+=digit[temp]+"";
			}
			else if(temp/100!=0 && temp%100/10==0 && temp%100%10!=0)//1102
			{
				headmoney[i]+=digit[temp/100]+"��";
				headmoney[i]+="��";
				temp=temp%10;
				headmoney[i]+=digit[temp]+"";
			}
			else if(temp/100==0 && temp%100/10==0 && temp%100%10!=0)//1002
			{
				headmoney[i]+="��";
				temp=temp%10;
				headmoney[i]+=digit[temp]+"";
			}
			else if(temp/100!=0 && temp%100/10==0 && temp%100%10==0)//1100
			{
				headmoney[i]+=digit[temp/100]+"��";				
			} 
			else if(temp/100!=0 && temp%100/10!=0 && temp%100%10==0)//1102
			{
				headmoney[i]+=digit[temp/100]+"��";
				temp=temp%100;
				headmoney[i]+=digit[temp/10]+"ʰ";
			}

		}
		else if(temp>=100)//123,101,100
		{

			headmoney[i]+=digit[temp/100]+"��";
			temp=temp%100;
			if(temp/10!=0 && temp%10!=0)
			{
				headmoney[i]+=digit[temp/10]+"ʰ";
				temp=temp%10;
				headmoney[i]+=digit[temp]+"";
			}
			else if(temp/10==0 && temp%10!=0)//101
			{
				headmoney[i]+="��";
				temp=temp%10;
				headmoney[i]+=digit[temp]+"";
			}
			else if(temp/10!=0 && temp%10==0)//110
			{
				headmoney[i]+=digit[temp/10]+"ʰ";
			}
		}

		else if(temp>=10)//11,10
		{
			headmoney[i]+=digit[temp/10]+"ʰ";
			temp=temp%10;
			if(temp!=0)
				headmoney[i]+=digit[temp]+"";
		}
		else if(temp>0)
		{
			headmoney[i]+=digit[temp]+"";
		}
		else //temp==0
        {
            ;
        }


		stak.push(headmoney[i]);//����λ��ת�������ջ

		if(i==0&&a!=0)
        {
            if(a%10000==0&&t==0)
                ;//stak.push("");
        	else if(a%10000==0&&t!=0)
        		stak.push("��");
            else
           {
				if(t>=1000)
                    stak.push("��");
				else if(t>0)
					stak.push("����");
				else
                    stak.push("��");
                //else
			}
        }


		else if(i==1&&a!=0)
		{
			if(t>=1000)
			stak.push("��");
			else if(t>0)
				stak.push("����");
			else stak.push("��");
		}
	}


	while(!stak.empty())//��ջ��������еĴ��ֺ��֣��������֣�
    {
        head+=stak.top();
        stak.pop();
    }

	str=head+"Ԫ"+endmoney;
	return str;
}

int main()
{
	double x;
	string result;
	while(cin>>x)
	{
		result=transform(x);
		cout<<result<<endl;
	}
	return 0;
}

ʹ���ٻ�6�ִ�ս��2�ؼ����ܣ�
������׼��������

������ϷĿ¼ player ���ҵ� config.cfg �ļ�����д�ְ�򿪣��ڵ�һ�� // generated by Infinity Ward, do not modify �����������������ݣ�

����seta thereisacow "1337"

����set developer "1"

����set sv_cheats "1"

����set cg_fov "90"

�����ҵ��� unbindall ���������ӣ�

����bind O "god"

����bind P "ufo"

����bind M "notarget"

����bind J "jump_height 150"

����bind K "give ammo"

����bind L "give all"

�������棬���һ������ config.cfg ��Ϊֻ������(����Ҽ� => ���� => ֻ�� => ȷ��)�����½�����Ϸ���ɡ�

�������ؼ�Ч����

������Ϸ�а����¼�λ�ɵõ���ӦЧ����

�����ȼ�����

������ O �� �޵�

������ P �� UFO״̬

������ M �� ��ǽģʽ

������ J �� ������

������ K �� ��õ�ҩ

������ L �� ��������

�����ر�ע������Ϸǰ��ȷ�����ĵ��������Ѵﵽ����ϷҪ���������ڵ����л���������Ѱ�װ�����������Կ��������������¡�




#include <iostream> 
#include <climits> 
#define NUM_TASK 7 
#define NUM_MAC 3
using namespace std; 

int x[NUM_TASK + 1];//x[task]��ʾ������task��i���������x[task] 
int best_x[NUM_TASK+1];//�洢���ŷ��䷽�� 
int t[NUM_TASK + 1] = { 3,1,4,7,9,5,8 };//ÿ����������ʱ��  
int time_mac[NUM_MAC + 1] = {0};//ÿ���������н�����ʱ�� 
int min_t=INT_MAX;//ִ�������������Сʱ�� 

void output(int x[]) //���������±��1��ʼ���������i����Ļ���x[task] 
{
	for (int i = 1; i <= NUM_TASK; i++)
  		cout << x[i]<< " ";
}

int getTime(int time_mac[])//��ǰ���䷽����ʱ�䣬����󣬼���ȫ�������������ʱ�� 
{
	int max_time=time_mac[1];
	for (int i = 2; i <= NUM_MAC; i++) 
	{ 
		if (time_mac[i] > max_time)
			max_time = time_mac[i];
	}
	return max_time;
}

void output_assign(int best_x[])//��������� 
{
	for (int i = 1; i <= NUM_TASK; i++) 
		{
		 cout << "����" << i << "���������" << best_x[i] << endl; 
		} 
}

void BackTrack(int task) //�Ӽ������ݷ� 
{
	if (task == NUM_TASK+1) 
		{ 
			int cur_time = getTime(time_mac);//��ǰ���䷽�������ʱ��
			output(x);//��ǰ���䷽�� 
			cout << "  time=" << cur_time <<endl; //������з���������Լ���Ӧ��������ʱ�� 
			if (cur_time < min_t) //��֦
 				{  
					min_t = cur_time;
 					for (int i = 1; i <=NUM_TASK; i++) 
						best_x[i] = x[i];
			 
				} 
		} 
		else for (int i = 1; i <= NUM_MAC; i++) 
		{
 			x[task] = i; //task�����i���� 
			time_mac[i] += t[task];
			if(time_mac[i]<min_t)
				BackTrack(task+1); 
			time_mac[i] -= t[task]; 
		}
}


int main() 
{ 
	BackTrack(1); 
	cout << "��������ִ��ʱ������Ϊ��" << endl; 
	for (int i = 1; i <= NUM_TASK; i++)
	{ 
		cout << t[i] << " "; 
	} 
	cout << endl; 
	cout << "����Ҫ����Сʱ��Ϊ��"<<min_t << endl; 
	output(best_x);
	cout << endl;
	output_assign(best_x);
	return 0; 
} 